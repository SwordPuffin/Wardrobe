#!@PYTHON@

# wardrobe.in
#
# Copyright 2025 Nathan Perlman
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# SPDX-License-Identifier: GPL-3.0-or-later

import contextlib
import gettext
import locale
import os
import signal
import subprocess
import sys

from pathlib import Path
from tempfile import TemporaryDirectory

VERSION = '@VERSION@'
pkgdatadir = '@pkgdatadir@'
localedir = '@localedir@'

sys.path.insert(1, pkgdatadir)
signal.signal(signal.SIGINT, signal.SIG_DFL)
locale.bindtextdomain('wardrobe', localedir)
locale.textdomain('wardrobe')
gettext.install('wardrobe', localedir)

#All code related to schemas are borrowed from Refine by Hari Rana
#https://gitlab.gnome.org/TheEvilSkeleton/Refine

if __name__ == '__main__':
    import gi

    gi.require_version("Xdp", "1.0")
    from gi.repository import Gio, GLib, Xdp

    resource = Gio.Resource.load(os.path.join(pkgdatadir, 'wardrobe.gresource'))
    resource._register()

    with contextlib.ExitStack() as context:
        if Xdp.Portal.running_under_flatpak():
            output = subprocess.run(
                ("sh", "-c", 'echo "$XDG_DATA_DIRS"'),
                capture_output=True,
                text=True,
            )

            folders = output.stdout.strip().split(os.pathsep)
            if(folders == None):
            	folders = ['/app/share', '/usr/share', 'usr/share/runtime/share', '/run/host/user-share', '/run/host/share']

            host_xdg_data_dirs = map(Path, folders)
            dconf_bridge_path = Path(GLib.get_user_runtime_dir(), "dconf-bridge")
            dconf_bridge_path.mkdir(parents=True, exist_ok=True)

            temporary_directory = context.enter_context(TemporaryDirectory(dir=dconf_bridge_path))
            Path(temporary_directory, "glib-2.0").mkdir()

            for directory in host_xdg_data_dirs:
                if not directory.is_relative_to(Path(os.sep, "usr")):
                    continue
                host_path = Path(os.sep, "run", "host", directory.relative_to(os.sep))
                schemas_path = Path(host_path, "glib-2.0", "schemas")
                if not schemas_path.exists():
                    continue

                Path(temporary_directory, "glib-2.0", "schemas").symlink_to(schemas_path)

                xdg_data_dirs = os.environ["XDG_DATA_DIRS"].split(os.pathsep)
                xdg_data_dirs.insert(0, temporary_directory)

                os.environ["XDG_DATA_DIRS"] = os.pathsep.join(xdg_data_dirs)

    from wardrobe import main
    sys.exit(main.main(VERSION))
